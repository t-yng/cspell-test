/// <reference types="node" />
import * as stream from 'stream';
export declare type Streamable = string | Buffer | Object;
export declare type IterableLike<T> = Iterable<T> | IterableIterator<T>;
export interface Options extends stream.ReadableOptions {
    removeEmpty?: boolean;
    /**
     * Indicate if stream.Readable.from function should be used.
     * @default true
     */
    _useNode?: boolean;
}
/**
 * Transform an iterable into a node readable stream.
 */
export declare function iterableToStream<T extends Streamable>(src: IterableLike<T>): stream.Readable;
export declare function iterableToStream<T extends Streamable, U extends Options = Options>(src: IterableLike<T>, options: U): stream.Readable;
export default iterableToStream;
